you should swap the sides of the boolean expression which are"<", ">", "==", "<=", ">=". The boolean expression may be contained in the if statement, while statement, or any other statement. You must follow the change rule to swap the sides of the boolean expression.

The change rule is as follows using the pseudocode, you should adapt it to the programming language of the given code.:
1. var1 > var2 should be transformed to var2 < var1
2. var1 >= var2 should be transformed to var2 <= var1
3. var1 == var2 should be transformed to var2 == var1
4. var1 <= var2 should be transformed to var2 >= var1
5. var1 < var2 should be transformed to var2 > var1
6. var1 != var2 should be transformed to var2 != var1

For example, in a rust code snippet with two functions:
"""
fn func1() {
    let a = 5;
    let b = 10;

    if a > b {
        println!("a is greater than b");
    } else {
        println!("b is greater than a");
    }
}

fn func2() {
    let c = 5;
    let mut d = 10; 

    if c == d {
        println!("c is equal to d");
    }
    
    if c >= 0 {
        println!("c is greater than or equal to d");
    }

    while d != c {
        for i in 5..10 { 
            println!("{}", i); 
        }
        d -= 1; 
    }
}
   """ 
The entry_point is 'func2', you should change the boolean expression in the function 'func2'.  The rephrased code should be like:
"""
fn func1() {
    let a = 5;
    let b = 10;

    if a > b {
        println!("a is greater than b");
    } else {
        println!("b is greater than a");
    }
}

fn func2() {
    let c = 5;
    let mut d = 10; 

    if d == c {
        println!("c is equal to d");
    }
    if c >= 0 {
        println!("c is greater than or equal to d");
    }
    
    while c != d {
        let mut i = 5; 
        while i < 10 { 
            println!("{}", i); 
            i += 1; 
        }
        d -= 1; 
    }
}
"""